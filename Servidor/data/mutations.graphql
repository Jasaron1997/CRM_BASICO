type Cliente
{   
    id:ID
    nombre: String
    apellido: String
    empresa: String
    emails: [Email]
    edad:Int
    tipo:TipoCliente
    vendedor:ID
}
type Email
{
    email:String
}

type Producto{
    id:ID
    nombre: String!
    precio: Int!
    stock: Int! 
}
type VendedorTotal{
    total:Float
    vendedor:[Usuario]
}
type ClienteTotal{
    total:Float
    cliente:[Cliente]
}
type Pedido{
    id:ID
    pedido: [PedidoProducto]
	total: Int
	fecha: String
	cliente: ID
	estado: EstadoPedido  
    vendedor:ID
}
type PedidoProducto{
    id:ID
    cantidad: Int
}
input EmailInput
{
    email:String
}
type Token
{
    token:String!
}
type Usuario
{
usuario:String
id:ID
nombre:String
rol:String

}
enum TipoCliente{
    BASICO
    PREMIUM
}

enum EstadoPedido{
    PENDIENTE
    COMPLETADO
    CANCELADO
}




type Query 
{   
   
    getClientes(limite:Int,offset:Int,vendedor:String): [Cliente]
    getCliente(id:ID) : Cliente
    totalClientes(vendedor:String):String 
    #productos
    obtenerProductos(limite:Int,offset:Int,stock:Boolean):[Producto]
    obtenerProducto(id:ID!):Producto
    totalProductos:String 
    #pedidos
    obtenerPedidos(cliente:ID):[Pedido]

    #graficas
	topClientes:[ClienteTotal]
	topVendedores:[VendedorTotal]

    #usuario
    obtenerUsuario:Usuario 
}
